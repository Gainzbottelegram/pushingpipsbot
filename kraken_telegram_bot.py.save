from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from dotenv import load_dotenv
import os
import krakenex

# Load environment variables
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
KRAKEN_API_KEY = os.getenv("KRAKEN_API_KEY")
KRAKEN_API_SECRET = os.getenv("KRAKEN_API_SECRET")

# Setup Kraken client
kraken = krakenex.API()
kraken.key = KRAKEN_API_KEY
kraken.secret = KRAKEN_API_SECRET

# Fetch price
def get_price(pair="XXBTZUSD"):
    try:
        res = kraken.query_public("Ticker", {"pair": pair})
        return res["result"][pair]["c"][0]
    except Exception as e:
        print("Error fetching price:", e)
        return "N/A"

# Lessons for Learn module
lessons = [
    {
        "title": "Lesson 1: What Is Trading?",
        "content": "Trading means buying and selling assets to make a profit.\nCrypto = digital assets.\nForex = currencies like USD/JPY or EUR/GBP."
    },
    {
        "title": "Lesson 2: Forex vs Crypto",
        "content": "Forex: More stable, huge volume.\nCrypto: Volatile, 24/7.\nPick your arena, or trade both!"
    },
    {
        "title": "Lesson 3: Risk Management 101",
        "content": "‚úÖ Always use a stop loss.\n‚ùå Don‚Äôt bet the farm.\nüéØ Control your risk, protect your capital!"
    },
    {
        "title": "Lesson 4: Mindset is the Muscle",
        "content": "Consistency > intensity.\nJust like the gym, small daily wins in trading compound over time.\nDiscipline = freedom."
    },
    {
        "title": "Lesson 5: Indicators & Price Action",
        "content": "Technical indicators like RSI, MACD, and EMAs help spot trends.\nBut price action is king ‚Äî always read the chart."
    },
    {
        "title": "Lesson 6: Journaling Your Trades",
        "content": "Track every trade.\nWhat was the plan? What was the result?\nLike tracking reps and sets ‚Äî reflection builds mastery."
    }
]

# /start command
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["üìä Dashboard", "üíµ Trade Now", "üí° Daily Mindset Boost"],
        ["üèãÔ∏è Fitness Tips", "‚öôÔ∏è Settings"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "üèÅ Welcome to GainzBot!\n\nYour hybrid gym üèãÔ∏è & trading coach is online.\n\n"
        "Let‚Äôs build both wealth and strength. Tap a button below to get started:",
        reply_markup=reply_markup
    )

# Reply keyboard message handler
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()

    if "trade" in text:
        price = get_price()
        await update.message.reply_text(f"üìà BTC/USD: ${price}")
if "trade" in text:
    await trade_now_handler(update, context)    elif "dashboard" in text:
        await update.message.reply_text("üìä Dashboard coming soon! All your gains in one view.")
    elif "learn" in text:
        await start_learning(update, context)
    elif "daily mindset" in text:
        await update.message.reply_text("üí™ Trading & lifting tips coming your way.")
    elif "fitness" in text:
        await update.message.reply_text("üèãÔ∏è‚Äç‚ôÇÔ∏è **Strong mind. Strong trades. Strong body.**")
    elif "settings" in text:
        await update.message.reply_text("‚öôÔ∏èSettings page coming soon. Customize your strategy.")
    else:
        await update.message.reply_text("ü§î Not sure what you mean. Try the buttons above!")

# /learn command
async def learn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üìò Start Learning", callback_data="lesson_0")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üìò Ready to boost your trading brain?\nTap below to begin the first lesson!",
        reply_markup=reply_markup
    )

# Callback handler for lesson navigation
async def lesson_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    lesson_index = int(query.data.split("_")[1])
    lesson = lessons[lesson_index]

    text = f"üß† *{lesson['title']}*\n\n{lesson['content']}"
    buttons = []

    if lesson_index > 0:
        buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è Back", callback_data=f"lesson_{lesson_index - 1}"))
    if lesson_index < len(lessons) - 1:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è Next", callback_data=f"lesson_{lesson_index + 1}"))

    reply_markup = InlineKeyboardMarkup([buttons]) if buttons else None
    await query.edit_message_text(text=text, reply_markup=reply_markup, parse_mode="Markdown")

# Run bot
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("learn", learn))
    app.add_handler(CallbackQueryHandler(lesson_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚ö°Ô∏è GainzBot is live!")
    app.run_polling()

if __name__ == "__main__":
    main()

